[tool.poetry]
name = "pom_backend_data_retrieval"
version = "0.1.0"
description = "Path of Modifiers backend data retrieval"
authors = ["Path of Modifiers team <team@pathofmodifiers.com>"]

[tool.poetry.dependencies]
python = "^3.10"
python-multipart = "^0.0.7"
email-validator = "^2.1.0.post1"
tenacity = "^8.2.3"
pydantic = ">2.0"

jinja2 = "^3.1.4"
httpx = "^0.25.1"
pydantic-settings = "^2.2.1"
sentry-sdk = {extras = ["fastapi"], version = "^1.40.6"}
pandas = "2.2.0" # for dataframe processing
requests = "^2.31.0"
tqdm = "^4.66.2"
aiohttp = "^3.9.3"
pyjwt = "^2.9.0"
pytest-asyncio = "^0.23.8"
pyyaml = "^6.0.2"
beautifulsoup4 = "^4.12.3"



[tool.poetry.group.dev.dependencies]
pytest = "^7.4.3"
mypy = "^1.8.0"
ruff = "^0.2.2"
pre-commit = "^3.6.2"
types-passlib = "^1.7.7.20240106"
coverage = "^7.4.3"

[build-system]
requires = ["poetry>=0.12"]
build-backend = "poetry.masonry.api"

[tool.mypy]
strict = true
exclude = ["venv", ".venv", "alembic"]

[tool.ruff]
target-version = "py310"
exclude = ["alembic"]

[tool.ruff.lint]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "ARG001", # unused arguments in functions
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "W191",  # indentation contains tabs
    "B904",  # Allow raising exceptions without from e, for HTTPException
]

[tool.ruff.lint.pyupgrade]
# Preserve types, even if a file imports `from __future__ import annotations`.
keep-runtime-typing = true
