services:
  
  db:
    image: postgres:16.1-alpine
    volumes:
      - "pom-db-data:/var/lib/postgresql/data"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB?Variable not set}
      POSTGRES_USER: ${POSTGRES_USER?Variable not set}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD?Variable not set}
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.pom-db-data == true

  backend:
    volumes:
      - ./backend/app:/app
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
        # Make Trawefik use this domain in HTTP
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}--backend-http.entrypoints=http
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
        # Make Traefik use this domain in HTTPS
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.entrypoints=https
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.rule=Host(`${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls=true
        # Use the "le" (Let's Encrypt) resolver created in the traefik-public service
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-https.tls.certresolver=le
        # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https
        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true
        # https-redirect middleware to redirect HTTP to HTTPS
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.middlewares=https-redirect
    networks:
      # Use the public network created to be shared between Traefik and
      # any other service that needs to be publicly available with HTTPS
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
    restart: always

volumes:
  pom-db-data: 

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: false