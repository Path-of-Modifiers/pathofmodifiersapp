services:
  
  db:
    image: postgres:16.1-alpine
    volumes:
      - "app-db-data:/var/lib/postgresql/data"
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
    deploy:
      placement:
        constraints:
          - node.labels.${STACK_NAME?Variable not set}.app-db-data == true

  backend:
    volumes:
      - ./backend/app:/app
    image: '${DOCKER_IMAGE_BACKEND?Variable not set}:${TAG-latest}'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      - SERVER_NAME=${DOMAIN?Variable not set}
      - SERVER_HOST=https://${DOMAIN?Variable not set}
      # Allow explicit env var override for tests
      - SMTP_HOST=${SMTP_HOST}
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        INSTALL_DEV: ${INSTALL_DEV-false}
    deploy:
      labels:
        - traefik.enable=true
        # Define the port inside of the Docker service to use
        - traefik.http.services.${STACK_NAME?Variable not set}-backend.loadbalancer.server.port=80
        # Make Trawefik use this domain in HTTP
        - traefik.http.routers.${STACK_NAME?Variable not set}-backend-http.rule=Host(`${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME?Variable not set}--backend-http.entrypoints=http
        # Use the traefik-public network (declared below)
        - traefik.docker.network=${TRAEFIK_PUBLIC_NETWORK?Variable not set}
    restart: always

volumes:
  app-db-data: 

networks:
  traefik-public:
    # Allow setting it to false for testing
    external: false