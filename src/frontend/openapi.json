{
  "openapi": "3.1.0",
  "info": {
    "title": "pathofmodifiers",
    "version": "0.1.0"
  },
  "paths": {
    "/api/api_v1/account/{accountName}": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get Account",
        "description": "Get the account by filter with key and value for \"accountName\" .\n\nAlways returns one account.",
        "operationId": "get_account",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "accountName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Accountname"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "accounts"
        ],
        "summary": "Update Account",
        "description": "Update an account by key and value for \"accountName\".\n\nReturns the updated account.",
        "operationId": "update_account",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "accountName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Accountname"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AccountUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "accounts"
        ],
        "summary": "Delete Account",
        "description": "Delete an account by key and value \"accountName\".\n\nReturns a message indicating the account was deleted.\nAlways deletes one account.",
        "operationId": "delete_account",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "accountName",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Accountname"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Accounts-Delete Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/account/": {
      "get": {
        "tags": [
          "accounts"
        ],
        "summary": "Get All Accounts",
        "description": "Get all accounts.\n\nReturns a list of all accounts.",
        "operationId": "get_all_accounts",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Account"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/Account"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Accounts-Get All Accounts"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "accounts"
        ],
        "summary": "Create Account",
        "description": "Create one or a list of accounts.\n\nReturns the created account or list of accounts.",
        "operationId": "create_account",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/AccountCreate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/AccountCreate"
                    },
                    "type": "array"
                  }
                ],
                "title": "Account"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/AccountCreate"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/AccountCreate"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Accounts-Create Account"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/currency/{currencyId}": {
      "get": {
        "tags": [
          "currencys"
        ],
        "summary": "Get Currency",
        "description": "Get currency by key and value for \"currencyId\".\n\nAlways returns one currency.",
        "operationId": "get_currency",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "currencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Currencyid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "currencys"
        ],
        "summary": "Update Currency",
        "description": "Update a currency by key and value for \"currencyId\".\n\nReturns the updated currency.",
        "operationId": "update_currency",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "currencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Currencyid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CurrencyUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Currency"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "currencys"
        ],
        "summary": "Delete Currency",
        "description": "Delete a currency by key and value for \"currencyId\".\n\nReturns a message indicating the currency was deleted.\nAlways deletes one currency.",
        "operationId": "delete_currency",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "currencyId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Currencyid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Currencys-Delete Currency"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/currency/": {
      "get": {
        "tags": [
          "currencys"
        ],
        "summary": "Get All Currencies",
        "description": "Get all currencies.\n\nReturns a list of all currencies.",
        "operationId": "get_all_currencies",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Currency"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/Currency"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Currencys-Get All Currencies"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "currencys"
        ],
        "summary": "Create Currency",
        "description": "Create one or a list of currencies.\n\nReturns the created currency or list of currencies.",
        "operationId": "create_currency",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/CurrencyCreate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/CurrencyCreate"
                    },
                    "type": "array"
                  }
                ],
                "title": "Currency"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/CurrencyCreate"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/CurrencyCreate"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Currencys-Create Currency"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/currency/latest_currency_id/": {
      "get": {
        "tags": [
          "currencys",
          "latest_currency_id"
        ],
        "summary": "Get Latest Currency Id",
        "description": "Get the latest currencyId\n\nCan only be used safely on an empty table or directly after an insertion.",
        "operationId": "get_latest_currency_id",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Currencys-Get Latest Currency Id"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/itemBaseType/{baseType}": {
      "get": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Get Item Base Type",
        "description": "Get item base type by key and value for \"baseType\".\n\nAlways returns one item base type.",
        "operationId": "get_item_base_type",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "baseType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Basetype"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemBaseType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Update Item Base Type",
        "description": "Update an item base type by key and value for \"baseType\".\n\nReturns the updated item base type.",
        "operationId": "update_item_base_type",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "baseType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Basetype"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemBaseTypeUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemBaseType"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Delete Item Base Type",
        "description": "Delete an item base type by key and value for \"baseType\".\n\nReturns a message that the item base type was deleted successfully.\nAlways deletes one item base type.",
        "operationId": "delete_item_base_type",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "baseType",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Basetype"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Itembasetypes-Delete Item Base Type"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/itemBaseType/": {
      "get": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Get All Item Base Types",
        "description": "Get all item base types.\n\nReturns a list of all item base types.",
        "operationId": "get_all_item_base_types",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemBaseType"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ItemBaseType"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Itembasetypes-Get All Item Base Types"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Create Item Base Type",
        "description": "Create one or a list of new item base types.\n\nReturns the created item base type or list of item base types.",
        "operationId": "create_item_base_type",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ItemBaseTypeCreate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/ItemBaseTypeCreate"
                    },
                    "type": "array"
                  }
                ],
                "title": "Itembasetype"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemBaseTypeCreate"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ItemBaseTypeCreate"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Itembasetypes-Create Item Base Type"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/itemBaseType/baseTypes/": {
      "get": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Get Base Types",
        "description": "Get all base types.\n\nReturns a list of all base types.",
        "operationId": "get_base_types",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/BaseType"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/BaseType"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Itembasetypes-Get Base Types"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/itemBaseType/uniqueCategories/": {
      "get": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Get Unique Categories",
        "description": "Get all unique categories.\n\nReturns a list of all categories.",
        "operationId": "get_unique_categories",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemBaseTypeCategory"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ItemBaseTypeCategory"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Itembasetypes-Get Unique Categories"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/itemBaseType/uniqueSubCategories/": {
      "get": {
        "tags": [
          "itemBaseTypes"
        ],
        "summary": "Get Unique Sub Categories",
        "description": "Get all unique sub categories.\n\nReturns a list of all sub categories.",
        "operationId": "get_unique_sub_categories",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemBaseTypeSubCategory"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ItemBaseTypeSubCategory"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Itembasetypes-Get Unique Sub Categories"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/itemModifier/{itemId}": {
      "get": {
        "tags": [
          "itemModifiers"
        ],
        "summary": "Get Item Modifier",
        "description": "Get item modifier or list of item modifiers by key and\nvalue for \"itemId\", optional \"modifierId\" and optional \"position\".\n\nDominant key is \"itemId\".\n\nReturns one or a list of item modifiers.",
        "operationId": "get_item_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Itemid"
            }
          },
          {
            "name": "modifierId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Modifierid"
            }
          },
          {
            "name": "position",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Position"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemModifier"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemModifier"
                      }
                    }
                  ],
                  "title": "Response Itemmodifiers-Get Item Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "itemModifiers"
        ],
        "summary": "Delete Item Modifier",
        "description": "Delete an item modifier by key and value for\n\"itemId\", optional \"modifierId\" and optional \"position\".\n\nDominant key is \"itemId\".\n\nReturns a message that the item modifier was deleted successfully.\nAlways deletes one item modifier.",
        "operationId": "delete_item_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Itemid"
            }
          },
          {
            "name": "modifierId",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "integer"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Modifierid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {}
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/itemModifier/": {
      "get": {
        "tags": [
          "itemModifiers"
        ],
        "summary": "Get All Item Modifiers",
        "description": "Get all item modifiers.\n\nReturns a list of all item modifiers.",
        "operationId": "get_all_item_modifiers",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemModifier"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemModifier"
                      }
                    }
                  ],
                  "title": "Response Itemmodifiers-Get All Item Modifiers"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "itemModifiers"
        ],
        "summary": "Create Item Modifier",
        "description": "Create one or a list item modifiers.\n\nReturns the created item modifier or list of item modifiers.",
        "operationId": "create_item_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ItemModifierCreate"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ItemModifierCreate"
                    }
                  }
                ],
                "title": "Itemmodifier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemModifierCreate"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ItemModifierCreate"
                      }
                    }
                  ],
                  "title": "Response Itemmodifiers-Create Item Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "itemModifiers"
        ],
        "summary": "Update Item Modifier",
        "description": "Update an item modifier by key and value for\n\"itemId\", optional \"modifierId\" and optional \"position\".\n\nDominant key is \"itemId\".\n\nReturns the updated item modifier.",
        "operationId": "update_item_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Itemid"
            }
          },
          {
            "name": "modifierId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifierid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemModifierUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ItemModifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/item/{itemId}": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Get Item",
        "description": "Get item by key and value for \"itemId\".\n\nAlways returns one item.",
        "operationId": "get_item",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Itemid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "items"
        ],
        "summary": "Update Item",
        "description": "Update an item by key and value for \"itemId\".\n\nReturns the updated item.",
        "operationId": "update_item",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Itemid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ItemUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "items"
        ],
        "summary": "Delete Item",
        "description": "Delete an item by key and value for \"itemId\".\n\nReturns a message indicating the item was deleted.\nAlways deletes one item.",
        "operationId": "delete_item",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "itemId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Itemid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Items-Delete Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/item/latest_item_id/": {
      "get": {
        "tags": [
          "items",
          "latest_item_id"
        ],
        "summary": "Get Latest Item Id",
        "description": "Get the latest \"itemId\"\n\nCan only be used safely on an empty table or directly after an insertion.",
        "operationId": "get_latest_item_id",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "title": "Response Items-Get Latest Item Id"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/item/": {
      "get": {
        "tags": [
          "items"
        ],
        "summary": "Get All Items",
        "description": "Get all items.\n\nReturns a list of all items.",
        "operationId": "get_all_items",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Item"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/Item"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Items-Get All Items"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "items"
        ],
        "summary": "Create Item",
        "description": "Create one or a list of new items.\n\nReturns the created item or list of items.",
        "operationId": "create_item",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ItemCreate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/ItemCreate"
                    },
                    "type": "array"
                  }
                ],
                "title": "Item"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ItemCreate"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/ItemCreate"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Items-Create Item"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/login/access-token": {
      "post": {
        "tags": [
          "logins"
        ],
        "summary": "Login Access Token",
        "description": "OAuth2 compatible token login, get an access token for future requests",
        "operationId": "login_access_token",
        "requestBody": {
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/Body_logins-login_access_token"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Token"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/login/test-token": {
      "post": {
        "tags": [
          "logins"
        ],
        "summary": "Test Token",
        "description": "Test access token",
        "operationId": "test_token",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/login/password-recovery/": {
      "post": {
        "tags": [
          "logins"
        ],
        "summary": "Recover Password",
        "description": "Password Recovery",
        "operationId": "recover_password",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Username"
            }
          },
          {
            "name": "email",
            "in": "query",
            "required": false,
            "schema": {
              "anyOf": [
                {
                  "type": "string",
                  "format": "email"
                },
                {
                  "type": "null"
                }
              ],
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/login/reset-password/": {
      "post": {
        "tags": [
          "logins"
        ],
        "summary": "Reset Password",
        "description": "Reset password",
        "operationId": "reset_password",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NewPassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/login/password-recovery-html-content/{email}": {
      "post": {
        "tags": [
          "logins"
        ],
        "summary": "Recover Password Html Content",
        "description": "HTML Content for Password Recovery",
        "operationId": "recover_password_html_content",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "email",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "email",
              "title": "Email"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "text/html": {
                "schema": {
                  "type": "string"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/modifier/{modifierId}": {
      "get": {
        "tags": [
          "modifiers"
        ],
        "summary": "Get Modifier",
        "description": "Get modifier or list of modifiers by key and\nvalue for \"modifierId\"\n\nDominant key is \"modifierId\".\n\nReturns one or a list of modifiers.",
        "operationId": "get_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "modifierId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifierid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Modifier"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Modifier"
                      }
                    }
                  ],
                  "title": "Response Modifiers-Get Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "modifiers"
        ],
        "summary": "Delete Modifier",
        "description": "Delete a modifier by key and value for \"modifierId\"\n\nReturns a message that the modifier was deleted.\nAlways deletes one modifier.",
        "operationId": "delete_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "modifierId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifierid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Modifiers-Delete Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/modifier/": {
      "get": {
        "tags": [
          "modifiers"
        ],
        "summary": "Get All Modifiers",
        "description": "Get all modifiers.\n\nReturns a list of all modifiers.",
        "operationId": "get_all_modifiers",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Modifier"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/Modifier"
                      }
                    }
                  ],
                  "title": "Response Modifiers-Get All Modifiers"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "modifiers"
        ],
        "summary": "Create Modifier",
        "description": "Create one or a list of new modifiers.\n\nReturns the created modifier or list of modifiers.",
        "operationId": "create_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/ModifierCreate"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/ModifierCreate"
                    }
                  }
                ],
                "title": "Modifier"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/ModifierCreate"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/ModifierCreate"
                      }
                    }
                  ],
                  "title": "Response Modifiers-Create Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "modifiers"
        ],
        "summary": "Update Modifier",
        "description": "Update a modifier by key and value for \"modifierId\"\n\nDominant key is \"modifierId\".\n\nReturns the updated modifier.",
        "operationId": "update_modifier",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "modifierId",
            "in": "query",
            "required": true,
            "schema": {
              "type": "integer",
              "title": "Modifierid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ModifierUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Modifier"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/modifier/grouped_modifiers_by_effect/": {
      "get": {
        "tags": [
          "modifiers"
        ],
        "summary": "Get Grouped Modifier By Effect",
        "description": "Get all grouped modifiers by effect.\n\nReturns a list of all grouped modifiers by effect.",
        "operationId": "get_grouped_modifier_by_effect",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/GroupedModifierByEffect"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/GroupedModifierByEffect"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Modifiers-Get Grouped Modifier By Effect"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/stash/{stashId}": {
      "get": {
        "tags": [
          "stashs"
        ],
        "summary": "Get Stash",
        "description": "Get stash by key and value for \"stashId\".\n\nAlways returns one stash.",
        "operationId": "get_stash",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "stashId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stashid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stash"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "stashs"
        ],
        "summary": "Update Stash",
        "description": "Update a stash by key and value for \"stashId\".\n\nReturns the updated stash.",
        "operationId": "update_stash",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "stashId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stashid"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StashUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Stash"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "stashs"
        ],
        "summary": "Delete Stash",
        "description": "Delete a stash by key and value for \"stashId\".\n\nReturns a message that the stash was deleted successfully.\nAlways deletes one stash.",
        "operationId": "delete_stash",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "stashId",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Stashid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Stashs-Delete Stash"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/stash/": {
      "get": {
        "tags": [
          "stashs"
        ],
        "summary": "Get All Stashes",
        "description": "Get all stashes.\n\nReturns a list of all stashes.",
        "operationId": "get_all_stashes",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/Stash"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/Stash"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Stashs-Get All Stashes"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "stashs"
        ],
        "summary": "Create Stash",
        "description": "Create one or a list of new stashes.\n\nReturns the created stash or list of stashes.",
        "operationId": "create_stash",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/StashCreate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/StashCreate"
                    },
                    "type": "array"
                  }
                ],
                "title": "Stash"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/StashCreate"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/StashCreate"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Stashs-Create Stash"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/plot/": {
      "post": {
        "tags": [
          "plots"
        ],
        "summary": "Get Plot Data",
        "description": "Takes a query based on the 'PlotQuery' schema and retrieves data\nto be used for plotting in the format of the 'PlotData' schema.\n\nThe 'PlotQuery' schema allows for modifier restriction and item specifications.",
        "operationId": "get_plot_data",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PlotQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PlotData"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/temporary_hashed_user_ip/check/": {
      "post": {
        "tags": [
          "temporary_hashed_user_ips"
        ],
        "summary": "Check Temporary Hashed User Ip",
        "description": "Takes a query based on the 'TemporaryHashedUserIp' schema and retrieves\nwhether the hashed user ip is valid.",
        "operationId": "check_temporary_hashed_user_ip",
        "parameters": [
          {
            "name": "ip",
            "in": "query",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Ip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "boolean",
                  "title": "Response Temporary Hashed User Ips-Check Temporary Hashed User Ip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/temporary_hashed_user_ip/{temporaryHashedUserIp}": {
      "get": {
        "tags": [
          "temporary_hashed_user_ips"
        ],
        "summary": "Get Temporary Hashed User Ip",
        "description": "Get temporary hashed user ip by key and value for \"temporaryHashedUserIp\".",
        "operationId": "get_temporary_hashed_user_ip",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "temporaryHashedUserIp",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Temporaryhasheduserip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/HashedUserIp"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HashedUserIp"
                      }
                    }
                  ],
                  "title": "Response Temporary Hashed User Ips-Get Temporary Hashed User Ip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "temporary_hashed_user_ips"
        ],
        "summary": "Update Temporary Hashed User Ip",
        "description": "Update temporary hashed user ip by key and value for \"temporaryHashedUserIp\".",
        "operationId": "update_temporary_hashed_user_ip",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "temporaryHashedUserIp",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Temporaryhasheduserip"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HashedUserIpUpdate"
                  },
                  {
                    "type": "array",
                    "items": {
                      "$ref": "#/components/schemas/HashedUserIpUpdate"
                    }
                  }
                ],
                "title": "Hashed User Ip Update"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/HashedUserIp"
                    },
                    {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/HashedUserIp"
                      }
                    }
                  ],
                  "title": "Response Temporary Hashed User Ips-Update Temporary Hashed User Ip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "temporary_hashed_user_ips"
        ],
        "summary": "Delete Temporary Hashed User Ip",
        "description": "Delete temporary hashed user ip by key and value for \"temporaryHashedUserIp\".",
        "operationId": "delete_temporary_hashed_user_ip",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "temporaryHashedUserIp",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "title": "Temporaryhasheduserip"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "title": "Response Temporary Hashed User Ips-Delete Temporary Hashed User Ip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/temporary_hashed_user_ip/": {
      "get": {
        "tags": [
          "temporary_hashed_user_ips"
        ],
        "summary": "Get All Temporary Hashed User Ips",
        "description": "Get all temporary hashed user ips.",
        "operationId": "get_all_temporary_hashed_user_ips",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/HashedUserIp"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/HashedUserIp"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Temporary Hashed User Ips-Get All Temporary Hashed User Ips"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "post": {
        "tags": [
          "temporary_hashed_user_ips"
        ],
        "summary": "Create Temporary Hashed User Ip",
        "description": "Create temporary hashed user ip.",
        "operationId": "create_temporary_hashed_user_ip",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "anyOf": [
                  {
                    "$ref": "#/components/schemas/HashedUserIpCreate"
                  },
                  {
                    "items": {
                      "$ref": "#/components/schemas/HashedUserIpCreate"
                    },
                    "type": "array"
                  }
                ],
                "title": "Hashed User Ip"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "$ref": "#/components/schemas/HashedUserIpCreate"
                    },
                    {
                      "items": {
                        "$ref": "#/components/schemas/HashedUserIpCreate"
                      },
                      "type": "array"
                    }
                  ],
                  "title": "Response Temporary Hashed User Ips-Create Temporary Hashed User Ip"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/turnstile/": {
      "post": {
        "tags": [
          "turnstiles"
        ],
        "summary": "Get Turnstile Validation",
        "description": "Takes a query based on the 'TurnstileQuery' schema and retrieves data\nbased on the cloudfare challenge turnstile validation response.\n\nArgs:\n    query (schemas.TurnstileQuery): Query based on the 'TurnstileQuery' schema.\n    verification (bool, optional): Verification flag. Defaults to Depends(verification).\n\nRaises:\n    HTTPException: If verification fails.\n\nReturns:\n    _type_: Returns a response based on the 'TurnstileResponse' schema.",
        "operationId": "get_turnstile_validation",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TurnstileQuery"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TurnstileResponse"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/user/": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get All",
        "description": "Retrieve all users.",
        "operationId": "get_all",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "skip",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 0,
              "title": "Skip"
            }
          },
          {
            "name": "limit",
            "in": "query",
            "required": false,
            "schema": {
              "type": "integer",
              "default": 100,
              "title": "Limit"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UsersPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Create",
        "description": "Create new user.",
        "operationId": "create",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/user/me": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User Me",
        "description": "Get current user.",
        "operationId": "get_user_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User Me",
        "description": "Delete own user.",
        "operationId": "delete_user_me",
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update Me",
        "description": "Update own user.",
        "operationId": "update_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateMe"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/user/me/password": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update Password Me",
        "description": "Update own password.",
        "operationId": "update_password_me",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePassword"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        },
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ]
      }
    },
    "/api/api_v1/user/signup": {
      "post": {
        "tags": [
          "users"
        ],
        "summary": "Register User",
        "description": "Create new user without the need to be logged in.",
        "operationId": "register_user",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserRegister"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/user/{user_id}": {
      "get": {
        "tags": [
          "users"
        ],
        "summary": "Get User By Id",
        "description": "Get a specific user by id.",
        "operationId": "get_user_by_id",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Update",
        "description": "Update a user.",
        "operationId": "update",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdate"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserPublic"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "users"
        ],
        "summary": "Delete User",
        "description": "Delete a user.",
        "operationId": "delete_user",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    },
    "/api/api_v1/user/activate/{user_id}": {
      "patch": {
        "tags": [
          "users"
        ],
        "summary": "Change Activate User",
        "description": "Change activity to current user.",
        "operationId": "change_activate_user",
        "security": [
          {
            "OAuth2PasswordBearer": []
          }
        ],
        "parameters": [
          {
            "name": "user_id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid",
              "title": "User Id"
            }
          },
          {
            "name": "activate",
            "in": "query",
            "required": true,
            "schema": {
              "type": "boolean",
              "title": "Activate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful Response",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Message"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/HTTPValidationError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "properties": {
          "accountName": {
            "type": "string",
            "title": "Accountname"
          },
          "isBanned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isbanned"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "accountName",
          "createdAt"
        ],
        "title": "Account"
      },
      "AccountCreate": {
        "properties": {
          "accountName": {
            "type": "string",
            "title": "Accountname"
          },
          "isBanned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isbanned"
          }
        },
        "type": "object",
        "required": [
          "accountName"
        ],
        "title": "AccountCreate"
      },
      "AccountUpdate": {
        "properties": {
          "accountName": {
            "type": "string",
            "title": "Accountname"
          },
          "isBanned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isbanned"
          }
        },
        "type": "object",
        "required": [
          "accountName"
        ],
        "title": "AccountUpdate"
      },
      "BaseSpecs": {
        "properties": {
          "baseType": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Basetype"
          },
          "category": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Category"
          },
          "subCategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          }
        },
        "type": "object",
        "title": "BaseSpecs"
      },
      "BaseType": {
        "properties": {
          "baseType": {
            "type": "string",
            "title": "Basetype"
          }
        },
        "type": "object",
        "required": [
          "baseType"
        ],
        "title": "BaseType"
      },
      "Body_logins-login_access_token": {
        "properties": {
          "grant_type": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "password"
              },
              {
                "type": "null"
              }
            ],
            "title": "Grant Type"
          },
          "username": {
            "type": "string",
            "title": "Username"
          },
          "password": {
            "type": "string",
            "title": "Password"
          },
          "scope": {
            "type": "string",
            "title": "Scope",
            "default": ""
          },
          "client_id": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Id"
          },
          "client_secret": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Client Secret"
          }
        },
        "type": "object",
        "required": [
          "username",
          "password"
        ],
        "title": "Body_logins-login_access_token"
      },
      "Currency": {
        "properties": {
          "tradeName": {
            "type": "string",
            "title": "Tradename"
          },
          "valueInChaos": {
            "type": "number",
            "title": "Valueinchaos"
          },
          "iconUrl": {
            "type": "string",
            "title": "Iconurl"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "currencyId": {
            "type": "integer",
            "title": "Currencyid"
          }
        },
        "type": "object",
        "required": [
          "tradeName",
          "valueInChaos",
          "iconUrl",
          "createdAt",
          "currencyId"
        ],
        "title": "Currency"
      },
      "CurrencyCreate": {
        "properties": {
          "tradeName": {
            "type": "string",
            "title": "Tradename"
          },
          "valueInChaos": {
            "type": "number",
            "title": "Valueinchaos"
          },
          "iconUrl": {
            "type": "string",
            "title": "Iconurl"
          }
        },
        "type": "object",
        "required": [
          "tradeName",
          "valueInChaos",
          "iconUrl"
        ],
        "title": "CurrencyCreate"
      },
      "CurrencyUpdate": {
        "properties": {
          "tradeName": {
            "type": "string",
            "title": "Tradename"
          },
          "valueInChaos": {
            "type": "number",
            "title": "Valueinchaos"
          },
          "iconUrl": {
            "type": "string",
            "title": "Iconurl"
          }
        },
        "type": "object",
        "required": [
          "tradeName",
          "valueInChaos",
          "iconUrl"
        ],
        "title": "CurrencyUpdate"
      },
      "GroupedModifierByEffect": {
        "properties": {
          "modifierId": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Modifierid"
          },
          "position": {
            "items": {
              "type": "integer"
            },
            "type": "array",
            "title": "Position"
          },
          "minRoll": {
            "items": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "array",
            "title": "Minroll"
          },
          "maxRoll": {
            "items": {
              "anyOf": [
                {
                  "type": "number"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "array",
            "title": "Maxroll"
          },
          "textRolls": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "array",
            "title": "Textrolls"
          },
          "effect": {
            "type": "string",
            "title": "Effect"
          },
          "static": {
            "items": {
              "anyOf": [
                {
                  "type": "boolean"
                },
                {
                  "type": "null"
                }
              ]
            },
            "type": "array",
            "title": "Static"
          }
        },
        "type": "object",
        "required": [
          "modifierId",
          "position",
          "minRoll",
          "maxRoll",
          "textRolls",
          "effect",
          "static"
        ],
        "title": "GroupedModifierByEffect"
      },
      "HTTPValidationError": {
        "properties": {
          "detail": {
            "items": {
              "$ref": "#/components/schemas/ValidationError"
            },
            "type": "array",
            "title": "Detail"
          }
        },
        "type": "object",
        "title": "HTTPValidationError"
      },
      "HashedUserIp": {
        "properties": {
          "hashedIp": {
            "type": "string",
            "title": "Hashedip"
          }
        },
        "type": "object",
        "required": [
          "hashedIp"
        ],
        "title": "HashedUserIp"
      },
      "HashedUserIpCreate": {
        "properties": {
          "hashedIp": {
            "type": "string",
            "title": "Hashedip"
          }
        },
        "type": "object",
        "required": [
          "hashedIp"
        ],
        "title": "HashedUserIpCreate"
      },
      "HashedUserIpUpdate": {
        "properties": {
          "hashedIp": {
            "type": "string",
            "title": "Hashedip"
          }
        },
        "type": "object",
        "required": [
          "hashedIp"
        ],
        "title": "HashedUserIpUpdate"
      },
      "Influences": {
        "properties": {
          "elder": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elder"
          },
          "shaper": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shaper"
          },
          "crusader": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Crusader"
          },
          "redeemer": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Redeemer"
          },
          "hunter": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hunter"
          },
          "warlord": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Warlord"
          }
        },
        "type": "object",
        "title": "Influences"
      },
      "Item": {
        "properties": {
          "stashId": {
            "type": "string",
            "title": "Stashid"
          },
          "gameItemId": {
            "type": "string",
            "title": "Gameitemid"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "iconUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iconurl"
          },
          "league": {
            "type": "string",
            "title": "League"
          },
          "typeLine": {
            "type": "string",
            "title": "Typeline"
          },
          "baseType": {
            "type": "string",
            "title": "Basetype"
          },
          "ilvl": {
            "type": "integer",
            "title": "Ilvl"
          },
          "rarity": {
            "type": "string",
            "title": "Rarity"
          },
          "identified": {
            "type": "boolean",
            "title": "Identified",
            "default": true
          },
          "forumNote": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Forumnote"
          },
          "currencyAmount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currencyamount"
          },
          "currencyId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currencyid"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "replica": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Replica"
          },
          "elder": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elder"
          },
          "shaper": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shaper"
          },
          "influences": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Influences"
              },
              {
                "type": "null"
              }
            ]
          },
          "searing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Searing"
          },
          "tangled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tangled"
          },
          "isRelic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isrelic"
          },
          "prefixes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefixes"
          },
          "suffixes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suffixes"
          },
          "foilVariation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Foilvariation"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "itemId": {
            "type": "integer",
            "title": "Itemid"
          }
        },
        "type": "object",
        "required": [
          "stashId",
          "gameItemId",
          "league",
          "typeLine",
          "baseType",
          "ilvl",
          "rarity",
          "createdAt",
          "itemId"
        ],
        "title": "Item"
      },
      "ItemBaseType": {
        "properties": {
          "baseType": {
            "type": "string",
            "title": "Basetype"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "subCategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "baseType",
          "category",
          "createdAt"
        ],
        "title": "ItemBaseType"
      },
      "ItemBaseTypeCategory": {
        "properties": {
          "category": {
            "type": "string",
            "title": "Category"
          }
        },
        "type": "object",
        "required": [
          "category"
        ],
        "title": "ItemBaseTypeCategory"
      },
      "ItemBaseTypeCreate": {
        "properties": {
          "baseType": {
            "type": "string",
            "title": "Basetype"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "subCategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          }
        },
        "type": "object",
        "required": [
          "baseType",
          "category"
        ],
        "title": "ItemBaseTypeCreate"
      },
      "ItemBaseTypeSubCategory": {
        "properties": {
          "subCategory": {
            "type": "string",
            "title": "Subcategory"
          }
        },
        "type": "object",
        "required": [
          "subCategory"
        ],
        "title": "ItemBaseTypeSubCategory"
      },
      "ItemBaseTypeUpdate": {
        "properties": {
          "baseType": {
            "type": "string",
            "title": "Basetype"
          },
          "category": {
            "type": "string",
            "title": "Category"
          },
          "subCategory": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Subcategory"
          }
        },
        "type": "object",
        "required": [
          "baseType",
          "category"
        ],
        "title": "ItemBaseTypeUpdate"
      },
      "ItemCreate": {
        "properties": {
          "stashId": {
            "type": "string",
            "title": "Stashid"
          },
          "gameItemId": {
            "type": "string",
            "title": "Gameitemid"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "iconUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iconurl"
          },
          "league": {
            "type": "string",
            "title": "League"
          },
          "typeLine": {
            "type": "string",
            "title": "Typeline"
          },
          "baseType": {
            "type": "string",
            "title": "Basetype"
          },
          "ilvl": {
            "type": "integer",
            "title": "Ilvl"
          },
          "rarity": {
            "type": "string",
            "title": "Rarity"
          },
          "identified": {
            "type": "boolean",
            "title": "Identified",
            "default": true
          },
          "forumNote": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Forumnote"
          },
          "currencyAmount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currencyamount"
          },
          "currencyId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currencyid"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "replica": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Replica"
          },
          "elder": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elder"
          },
          "shaper": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shaper"
          },
          "influences": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Influences"
              },
              {
                "type": "null"
              }
            ]
          },
          "searing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Searing"
          },
          "tangled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tangled"
          },
          "isRelic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isrelic"
          },
          "prefixes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefixes"
          },
          "suffixes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suffixes"
          },
          "foilVariation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Foilvariation"
          }
        },
        "type": "object",
        "required": [
          "stashId",
          "gameItemId",
          "league",
          "typeLine",
          "baseType",
          "ilvl",
          "rarity"
        ],
        "title": "ItemCreate"
      },
      "ItemModifier": {
        "properties": {
          "itemId": {
            "type": "integer",
            "title": "Itemid"
          },
          "modifierId": {
            "type": "integer",
            "title": "Modifierid"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "roll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Roll"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "itemId",
          "modifierId",
          "position",
          "createdAt"
        ],
        "title": "ItemModifier"
      },
      "ItemModifierCreate": {
        "properties": {
          "itemId": {
            "type": "integer",
            "title": "Itemid"
          },
          "modifierId": {
            "type": "integer",
            "title": "Modifierid"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "roll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Roll"
          }
        },
        "type": "object",
        "required": [
          "itemId",
          "modifierId",
          "position"
        ],
        "title": "ItemModifierCreate"
      },
      "ItemModifierUpdate": {
        "properties": {
          "itemId": {
            "type": "integer",
            "title": "Itemid"
          },
          "modifierId": {
            "type": "integer",
            "title": "Modifierid"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "roll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Roll"
          }
        },
        "type": "object",
        "required": [
          "itemId",
          "modifierId",
          "position"
        ],
        "title": "ItemModifierUpdate"
      },
      "ItemSpecs": {
        "properties": {
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "identified": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Identified"
          },
          "minIlvl": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minilvl"
          },
          "maxIlvl": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxilvl"
          },
          "rarity": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Rarity"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "replica": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Replica"
          },
          "influences": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Influences"
              },
              {
                "type": "null"
              }
            ]
          },
          "searing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Searing"
          },
          "tangled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tangled"
          },
          "isRelic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isrelic"
          },
          "foilVariation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Foilvariation"
          }
        },
        "type": "object",
        "title": "ItemSpecs"
      },
      "ItemUpdate": {
        "properties": {
          "stashId": {
            "type": "string",
            "title": "Stashid"
          },
          "gameItemId": {
            "type": "string",
            "title": "Gameitemid"
          },
          "name": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Name"
          },
          "iconUrl": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Iconurl"
          },
          "league": {
            "type": "string",
            "title": "League"
          },
          "typeLine": {
            "type": "string",
            "title": "Typeline"
          },
          "baseType": {
            "type": "string",
            "title": "Basetype"
          },
          "ilvl": {
            "type": "integer",
            "title": "Ilvl"
          },
          "rarity": {
            "type": "string",
            "title": "Rarity"
          },
          "identified": {
            "type": "boolean",
            "title": "Identified",
            "default": true
          },
          "forumNote": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Forumnote"
          },
          "currencyAmount": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currencyamount"
          },
          "currencyId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Currencyid"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "replica": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Replica"
          },
          "elder": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Elder"
          },
          "shaper": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Shaper"
          },
          "influences": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/Influences"
              },
              {
                "type": "null"
              }
            ]
          },
          "searing": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Searing"
          },
          "tangled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Tangled"
          },
          "isRelic": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isrelic"
          },
          "prefixes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Prefixes"
          },
          "suffixes": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Suffixes"
          },
          "foilVariation": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Foilvariation"
          }
        },
        "type": "object",
        "required": [
          "stashId",
          "gameItemId",
          "league",
          "typeLine",
          "baseType",
          "ilvl",
          "rarity"
        ],
        "title": "ItemUpdate"
      },
      "Message": {
        "properties": {
          "message": {
            "type": "string",
            "title": "Message"
          }
        },
        "type": "object",
        "required": [
          "message"
        ],
        "title": "Message"
      },
      "MetadataObject": {
        "properties": {
          "interactive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Interactive"
          }
        },
        "type": "object",
        "title": "MetadataObject"
      },
      "Modifier": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "minRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minroll"
          },
          "maxRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxroll"
          },
          "textRolls": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textrolls"
          },
          "static": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Static"
          },
          "effect": {
            "type": "string",
            "title": "Effect"
          },
          "regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Regex"
          },
          "implicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Implicit"
          },
          "explicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explicit"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "unique": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unique"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "enchanted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enchanted"
          },
          "veiled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veiled"
          },
          "modifierId": {
            "type": "integer",
            "title": "Modifierid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "position",
          "effect",
          "modifierId",
          "createdAt"
        ],
        "title": "Modifier"
      },
      "ModifierCreate": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "minRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minroll"
          },
          "maxRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxroll"
          },
          "textRolls": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textrolls"
          },
          "static": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Static"
          },
          "effect": {
            "type": "string",
            "title": "Effect"
          },
          "regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Regex"
          },
          "implicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Implicit"
          },
          "explicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explicit"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "unique": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unique"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "enchanted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enchanted"
          },
          "veiled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veiled"
          },
          "modifierId": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Modifierid"
          }
        },
        "type": "object",
        "required": [
          "position",
          "effect"
        ],
        "title": "ModifierCreate"
      },
      "ModifierLimitations": {
        "properties": {
          "maxRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxroll"
          },
          "minRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minroll"
          },
          "textRoll": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textroll"
          }
        },
        "type": "object",
        "title": "ModifierLimitations"
      },
      "ModifierUpdate": {
        "properties": {
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "minRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Minroll"
          },
          "maxRoll": {
            "anyOf": [
              {
                "type": "number"
              },
              {
                "type": "null"
              }
            ],
            "title": "Maxroll"
          },
          "textRolls": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Textrolls"
          },
          "static": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Static"
          },
          "effect": {
            "type": "string",
            "title": "Effect"
          },
          "regex": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Regex"
          },
          "implicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Implicit"
          },
          "explicit": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Explicit"
          },
          "delve": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Delve"
          },
          "fractured": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Fractured"
          },
          "synthesized": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Synthesized"
          },
          "unique": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Unique"
          },
          "corrupted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Corrupted"
          },
          "enchanted": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Enchanted"
          },
          "veiled": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Veiled"
          }
        },
        "type": "object",
        "required": [
          "position",
          "effect"
        ],
        "title": "ModifierUpdate"
      },
      "NewPassword": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "new_password": {
            "type": "string",
            "maxLength": 40,
            "minLength": 8,
            "title": "New Password"
          }
        },
        "type": "object",
        "required": [
          "token",
          "new_password"
        ],
        "title": "NewPassword"
      },
      "PlotData": {
        "properties": {
          "valueInChaos": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Valueinchaos"
          },
          "timeStamp": {
            "items": {
              "type": "string",
              "format": "date-time"
            },
            "type": "array",
            "title": "Timestamp"
          },
          "valueInMostCommonCurrencyUsed": {
            "items": {
              "type": "number"
            },
            "type": "array",
            "title": "Valueinmostcommoncurrencyused"
          },
          "mostCommonCurrencyUsed": {
            "type": "string",
            "title": "Mostcommoncurrencyused"
          }
        },
        "type": "object",
        "required": [
          "valueInChaos",
          "timeStamp",
          "valueInMostCommonCurrencyUsed",
          "mostCommonCurrencyUsed"
        ],
        "title": "PlotData"
      },
      "PlotQuery": {
        "properties": {
          "league": {
            "type": "string",
            "title": "League"
          },
          "itemSpecifications": {
            "$ref": "#/components/schemas/ItemSpecs"
          },
          "baseSpecifications": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/BaseSpecs"
              },
              {
                "type": "null"
              }
            ]
          },
          "wantedModifiers": {
            "items": {
              "$ref": "#/components/schemas/WantedModifier"
            },
            "type": "array",
            "title": "Wantedmodifiers"
          }
        },
        "type": "object",
        "required": [
          "league",
          "itemSpecifications",
          "wantedModifiers"
        ],
        "title": "PlotQuery"
      },
      "Stash": {
        "properties": {
          "accountName": {
            "type": "string",
            "title": "Accountname"
          },
          "public": {
            "type": "boolean",
            "title": "Public"
          },
          "league": {
            "type": "string",
            "title": "League"
          },
          "stashId": {
            "type": "string",
            "title": "Stashid"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "title": "Createdat"
          },
          "updatedAt": {
            "anyOf": [
              {
                "type": "string",
                "format": "date-time"
              },
              {
                "type": "null"
              }
            ],
            "title": "Updatedat"
          }
        },
        "type": "object",
        "required": [
          "accountName",
          "public",
          "league",
          "stashId",
          "createdAt"
        ],
        "title": "Stash"
      },
      "StashCreate": {
        "properties": {
          "accountName": {
            "type": "string",
            "title": "Accountname"
          },
          "public": {
            "type": "boolean",
            "title": "Public"
          },
          "league": {
            "type": "string",
            "title": "League"
          },
          "stashId": {
            "type": "string",
            "title": "Stashid"
          }
        },
        "type": "object",
        "required": [
          "accountName",
          "public",
          "league",
          "stashId"
        ],
        "title": "StashCreate"
      },
      "StashUpdate": {
        "properties": {
          "accountName": {
            "type": "string",
            "title": "Accountname"
          },
          "public": {
            "type": "boolean",
            "title": "Public"
          },
          "league": {
            "type": "string",
            "title": "League"
          }
        },
        "type": "object",
        "required": [
          "accountName",
          "public",
          "league"
        ],
        "title": "StashUpdate"
      },
      "Token": {
        "properties": {
          "access_token": {
            "type": "string",
            "title": "Access Token"
          },
          "token_type": {
            "type": "string",
            "title": "Token Type",
            "default": "bearer"
          }
        },
        "type": "object",
        "required": [
          "access_token"
        ],
        "title": "Token"
      },
      "TurnstileQuery": {
        "properties": {
          "token": {
            "type": "string",
            "title": "Token"
          },
          "ip": {
            "type": "string",
            "title": "Ip"
          }
        },
        "type": "object",
        "required": [
          "token",
          "ip"
        ],
        "title": "TurnstileQuery"
      },
      "TurnstileResponse": {
        "properties": {
          "success": {
            "type": "boolean",
            "title": "Success"
          },
          "error_codes": {
            "anyOf": [
              {
                "items": {
                  "type": "string"
                },
                "type": "array"
              },
              {
                "type": "null"
              }
            ],
            "title": "Error Codes"
          },
          "challenge_ts": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Challenge Ts"
          },
          "hostname": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Hostname"
          },
          "action": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Action"
          },
          "cdata": {
            "anyOf": [
              {
                "type": "string"
              },
              {
                "type": "null"
              }
            ],
            "title": "Cdata"
          },
          "metadata": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/MetadataObject"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "success"
        ],
        "title": "TurnstileResponse"
      },
      "UpdatePassword": {
        "properties": {
          "current_password": {
            "type": "string",
            "minLength": 8,
            "title": "Current Password"
          },
          "new_password": {
            "type": "string",
            "minLength": 8,
            "title": "New Password"
          }
        },
        "type": "object",
        "required": [
          "current_password",
          "new_password"
        ],
        "title": "UpdatePassword"
      },
      "UserCreate": {
        "properties": {
          "username": {
            "type": "string",
            "pattern": "^[\\p{L}\\p{N}_]+$",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "isActive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isactive",
            "default": true
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser",
            "default": false
          },
          "rateLimitTier": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ratelimittier",
            "default": 0
          },
          "isBanned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isbanned",
            "default": false
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "title": "UserCreate"
      },
      "UserPublic": {
        "properties": {
          "username": {
            "type": "string",
            "pattern": "^[\\p{L}\\p{N}_]+$",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "isActive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isactive",
            "default": true
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser",
            "default": false
          },
          "rateLimitTier": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ratelimittier",
            "default": 0
          },
          "isBanned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isbanned",
            "default": false
          },
          "userId": {
            "type": "string",
            "format": "uuid",
            "title": "Userid"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "userId"
        ],
        "title": "UserPublic"
      },
      "UserRegister": {
        "properties": {
          "username": {
            "type": "string",
            "pattern": "^[\\p{L}\\p{N}_]+$",
            "title": "Username"
          },
          "email": {
            "type": "string",
            "format": "email",
            "title": "Email"
          },
          "password": {
            "type": "string",
            "minLength": 8,
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username",
          "email",
          "password"
        ],
        "title": "UserRegister"
      },
      "UserUpdate": {
        "properties": {
          "username": {
            "type": "string",
            "pattern": "^[\\p{L}\\p{N}_]+$",
            "title": "Username"
          },
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "isActive": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isactive",
            "default": true
          },
          "isSuperuser": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Issuperuser",
            "default": false
          },
          "rateLimitTier": {
            "anyOf": [
              {
                "type": "integer"
              },
              {
                "type": "null"
              }
            ],
            "title": "Ratelimittier",
            "default": 0
          },
          "isBanned": {
            "anyOf": [
              {
                "type": "boolean"
              },
              {
                "type": "null"
              }
            ],
            "title": "Isbanned",
            "default": false
          },
          "password": {
            "anyOf": [
              {
                "type": "string",
                "minLength": 8
              },
              {
                "type": "null"
              }
            ],
            "title": "Password"
          }
        },
        "type": "object",
        "required": [
          "username"
        ],
        "title": "UserUpdate"
      },
      "UserUpdateMe": {
        "properties": {
          "email": {
            "anyOf": [
              {
                "type": "string",
                "format": "email"
              },
              {
                "type": "null"
              }
            ],
            "title": "Email"
          },
          "username": {
            "anyOf": [
              {
                "type": "string",
                "pattern": "^[\\p{L}\\p{N}_]+$"
              },
              {
                "type": "null"
              }
            ],
            "title": "Username"
          }
        },
        "type": "object",
        "title": "UserUpdateMe"
      },
      "UsersPublic": {
        "properties": {
          "data": {
            "items": {
              "$ref": "#/components/schemas/UserPublic"
            },
            "type": "array",
            "title": "Data"
          },
          "count": {
            "type": "integer",
            "title": "Count"
          }
        },
        "type": "object",
        "required": [
          "data",
          "count"
        ],
        "title": "UsersPublic"
      },
      "ValidationError": {
        "properties": {
          "loc": {
            "items": {
              "anyOf": [
                {
                  "type": "string"
                },
                {
                  "type": "integer"
                }
              ]
            },
            "type": "array",
            "title": "Location"
          },
          "msg": {
            "type": "string",
            "title": "Message"
          },
          "type": {
            "type": "string",
            "title": "Error Type"
          }
        },
        "type": "object",
        "required": [
          "loc",
          "msg",
          "type"
        ],
        "title": "ValidationError"
      },
      "WantedModifier": {
        "properties": {
          "modifierId": {
            "type": "integer",
            "title": "Modifierid"
          },
          "position": {
            "type": "integer",
            "title": "Position"
          },
          "modifierLimitations": {
            "anyOf": [
              {
                "$ref": "#/components/schemas/ModifierLimitations"
              },
              {
                "type": "null"
              }
            ]
          }
        },
        "type": "object",
        "required": [
          "modifierId",
          "position"
        ],
        "title": "WantedModifier"
      }
    },
    "securitySchemes": {
      "OAuth2PasswordBearer": {
        "type": "oauth2",
        "flows": {
          "password": {
            "scopes": {},
            "tokenUrl": "/api/api_v1/login/access-token"
          }
        }
      }
    }
  }
}
