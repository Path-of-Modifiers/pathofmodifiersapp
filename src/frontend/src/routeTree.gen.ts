/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UserNotActivatedImport } from './routes/user-not-activated'
import { Route as UpdateUserEmailImport } from './routes/update-user-email'
import { Route as TermsOfUseImport } from './routes/terms-of-use'
import { Route as SignupImport } from './routes/signup'
import { Route as ResetPasswordImport } from './routes/reset-password'
import { Route as RecoverPasswordImport } from './routes/recover-password'
import { Route as PrivacyPolicyImport } from './routes/privacy-policy'
import { Route as LoginImport } from './routes/login'
import { Route as CaptchaImport } from './routes/captcha'
import { Route as ActivateAccountImport } from './routes/activate-account'
import { Route as AboutImport } from './routes/about'
import { Route as LayoutImport } from './routes/_layout'
import { Route as LayoutIndexImport } from './routes/_layout/index'
import { Route as LayoutSettingsImport } from './routes/_layout/settings'

// Create/Update Routes

const UserNotActivatedRoute = UserNotActivatedImport.update({
  id: '/user-not-activated',
  path: '/user-not-activated',
  getParentRoute: () => rootRoute,
} as any)

const UpdateUserEmailRoute = UpdateUserEmailImport.update({
  id: '/update-user-email',
  path: '/update-user-email',
  getParentRoute: () => rootRoute,
} as any)

const TermsOfUseRoute = TermsOfUseImport.update({
  id: '/terms-of-use',
  path: '/terms-of-use',
  getParentRoute: () => rootRoute,
} as any)

const SignupRoute = SignupImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRoute,
} as any)

const ResetPasswordRoute = ResetPasswordImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRoute,
} as any)

const RecoverPasswordRoute = RecoverPasswordImport.update({
  id: '/recover-password',
  path: '/recover-password',
  getParentRoute: () => rootRoute,
} as any)

const PrivacyPolicyRoute = PrivacyPolicyImport.update({
  id: '/privacy-policy',
  path: '/privacy-policy',
  getParentRoute: () => rootRoute,
} as any)

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const CaptchaRoute = CaptchaImport.update({
  id: '/captcha',
  path: '/captcha',
  getParentRoute: () => rootRoute,
} as any)

const ActivateAccountRoute = ActivateAccountImport.update({
  id: '/activate-account',
  path: '/activate-account',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const LayoutRoute = LayoutImport.update({
  id: '/_layout',
  getParentRoute: () => rootRoute,
} as any)

const LayoutIndexRoute = LayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => LayoutRoute,
} as any)

const LayoutSettingsRoute = LayoutSettingsImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => LayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_layout': {
      id: '/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof LayoutImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/activate-account': {
      id: '/activate-account'
      path: '/activate-account'
      fullPath: '/activate-account'
      preLoaderRoute: typeof ActivateAccountImport
      parentRoute: typeof rootRoute
    }
    '/captcha': {
      id: '/captcha'
      path: '/captcha'
      fullPath: '/captcha'
      preLoaderRoute: typeof CaptchaImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/privacy-policy': {
      id: '/privacy-policy'
      path: '/privacy-policy'
      fullPath: '/privacy-policy'
      preLoaderRoute: typeof PrivacyPolicyImport
      parentRoute: typeof rootRoute
    }
    '/recover-password': {
      id: '/recover-password'
      path: '/recover-password'
      fullPath: '/recover-password'
      preLoaderRoute: typeof RecoverPasswordImport
      parentRoute: typeof rootRoute
    }
    '/reset-password': {
      id: '/reset-password'
      path: '/reset-password'
      fullPath: '/reset-password'
      preLoaderRoute: typeof ResetPasswordImport
      parentRoute: typeof rootRoute
    }
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupImport
      parentRoute: typeof rootRoute
    }
    '/terms-of-use': {
      id: '/terms-of-use'
      path: '/terms-of-use'
      fullPath: '/terms-of-use'
      preLoaderRoute: typeof TermsOfUseImport
      parentRoute: typeof rootRoute
    }
    '/update-user-email': {
      id: '/update-user-email'
      path: '/update-user-email'
      fullPath: '/update-user-email'
      preLoaderRoute: typeof UpdateUserEmailImport
      parentRoute: typeof rootRoute
    }
    '/user-not-activated': {
      id: '/user-not-activated'
      path: '/user-not-activated'
      fullPath: '/user-not-activated'
      preLoaderRoute: typeof UserNotActivatedImport
      parentRoute: typeof rootRoute
    }
    '/_layout/settings': {
      id: '/_layout/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof LayoutSettingsImport
      parentRoute: typeof LayoutImport
    }
    '/_layout/': {
      id: '/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof LayoutIndexImport
      parentRoute: typeof LayoutImport
    }
  }
}

// Create and export the route tree

interface LayoutRouteChildren {
  LayoutSettingsRoute: typeof LayoutSettingsRoute
  LayoutIndexRoute: typeof LayoutIndexRoute
}

const LayoutRouteChildren: LayoutRouteChildren = {
  LayoutSettingsRoute: LayoutSettingsRoute,
  LayoutIndexRoute: LayoutIndexRoute,
}

const LayoutRouteWithChildren =
  LayoutRoute._addFileChildren(LayoutRouteChildren)

export interface FileRoutesByFullPath {
  '': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/activate-account': typeof ActivateAccountRoute
  '/captcha': typeof CaptchaRoute
  '/login': typeof LoginRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/terms-of-use': typeof TermsOfUseRoute
  '/update-user-email': typeof UpdateUserEmailRoute
  '/user-not-activated': typeof UserNotActivatedRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesByTo {
  '/about': typeof AboutRoute
  '/activate-account': typeof ActivateAccountRoute
  '/captcha': typeof CaptchaRoute
  '/login': typeof LoginRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/terms-of-use': typeof TermsOfUseRoute
  '/update-user-email': typeof UpdateUserEmailRoute
  '/user-not-activated': typeof UserNotActivatedRoute
  '/settings': typeof LayoutSettingsRoute
  '/': typeof LayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_layout': typeof LayoutRouteWithChildren
  '/about': typeof AboutRoute
  '/activate-account': typeof ActivateAccountRoute
  '/captcha': typeof CaptchaRoute
  '/login': typeof LoginRoute
  '/privacy-policy': typeof PrivacyPolicyRoute
  '/recover-password': typeof RecoverPasswordRoute
  '/reset-password': typeof ResetPasswordRoute
  '/signup': typeof SignupRoute
  '/terms-of-use': typeof TermsOfUseRoute
  '/update-user-email': typeof UpdateUserEmailRoute
  '/user-not-activated': typeof UserNotActivatedRoute
  '/_layout/settings': typeof LayoutSettingsRoute
  '/_layout/': typeof LayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | ''
    | '/about'
    | '/activate-account'
    | '/captcha'
    | '/login'
    | '/privacy-policy'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/terms-of-use'
    | '/update-user-email'
    | '/user-not-activated'
    | '/settings'
    | '/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/about'
    | '/activate-account'
    | '/captcha'
    | '/login'
    | '/privacy-policy'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/terms-of-use'
    | '/update-user-email'
    | '/user-not-activated'
    | '/settings'
    | '/'
  id:
    | '__root__'
    | '/_layout'
    | '/about'
    | '/activate-account'
    | '/captcha'
    | '/login'
    | '/privacy-policy'
    | '/recover-password'
    | '/reset-password'
    | '/signup'
    | '/terms-of-use'
    | '/update-user-email'
    | '/user-not-activated'
    | '/_layout/settings'
    | '/_layout/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  LayoutRoute: typeof LayoutRouteWithChildren
  AboutRoute: typeof AboutRoute
  ActivateAccountRoute: typeof ActivateAccountRoute
  CaptchaRoute: typeof CaptchaRoute
  LoginRoute: typeof LoginRoute
  PrivacyPolicyRoute: typeof PrivacyPolicyRoute
  RecoverPasswordRoute: typeof RecoverPasswordRoute
  ResetPasswordRoute: typeof ResetPasswordRoute
  SignupRoute: typeof SignupRoute
  TermsOfUseRoute: typeof TermsOfUseRoute
  UpdateUserEmailRoute: typeof UpdateUserEmailRoute
  UserNotActivatedRoute: typeof UserNotActivatedRoute
}

const rootRouteChildren: RootRouteChildren = {
  LayoutRoute: LayoutRouteWithChildren,
  AboutRoute: AboutRoute,
  ActivateAccountRoute: ActivateAccountRoute,
  CaptchaRoute: CaptchaRoute,
  LoginRoute: LoginRoute,
  PrivacyPolicyRoute: PrivacyPolicyRoute,
  RecoverPasswordRoute: RecoverPasswordRoute,
  ResetPasswordRoute: ResetPasswordRoute,
  SignupRoute: SignupRoute,
  TermsOfUseRoute: TermsOfUseRoute,
  UpdateUserEmailRoute: UpdateUserEmailRoute,
  UserNotActivatedRoute: UserNotActivatedRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_layout",
        "/about",
        "/activate-account",
        "/captcha",
        "/login",
        "/privacy-policy",
        "/recover-password",
        "/reset-password",
        "/signup",
        "/terms-of-use",
        "/update-user-email",
        "/user-not-activated"
      ]
    },
    "/_layout": {
      "filePath": "_layout.tsx",
      "children": [
        "/_layout/settings",
        "/_layout/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/activate-account": {
      "filePath": "activate-account.tsx"
    },
    "/captcha": {
      "filePath": "captcha.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/privacy-policy": {
      "filePath": "privacy-policy.tsx"
    },
    "/recover-password": {
      "filePath": "recover-password.tsx"
    },
    "/reset-password": {
      "filePath": "reset-password.tsx"
    },
    "/signup": {
      "filePath": "signup.tsx"
    },
    "/terms-of-use": {
      "filePath": "terms-of-use.tsx"
    },
    "/update-user-email": {
      "filePath": "update-user-email.tsx"
    },
    "/user-not-activated": {
      "filePath": "user-not-activated.tsx"
    },
    "/_layout/settings": {
      "filePath": "_layout/settings.tsx",
      "parent": "/_layout"
    },
    "/_layout/": {
      "filePath": "_layout/index.tsx",
      "parent": "/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
