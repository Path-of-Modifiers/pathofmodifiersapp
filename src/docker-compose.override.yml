# Useful for development and testing
services:
  proxy:
    image: traefik:v3.0
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "80:80"
      - "8090:8080"
    # Duplicate the command from docker-compose.yml to add --api.insecure=true
    command:
      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker
      # Add a constraint to only use services with the label for this stack
      - --providers.docker.constraints=Label(`traefik.constraint-label`, `traefik-public`)
      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false
      # Create an entrypoint "http" listening on port 80
      - --entrypoints.http.address=:80
      # Create an entrypoint "https" listening on port 443
      - --entrypoints.https.address=:443
      # Enable the access log, with HTTP requests
      - --accesslog
      # Enable the Traefik log, for configurations and errors
      - --log
      # Enable debug logging for local development
      - --log.level=DEBUG
      # Enable the Dashboard and API
      - --api
      # Enable the Dashboard and API in insecure mode for local development
      - --api.insecure=true
    labels:
      # Enable Traefik for this service, to make it available in the public network
      - traefik.enable=true
      - traefik.constraint-label=traefik-public
      # Dummy https-redirect middleware that doesn't really redirect, only to
      # allow running it locally
      - traefik.http.middlewares.https-redirect.contenttype.autodetect=false

  db:
    restart: "no"
    ports:
      - 5432:5432

  cache:
    restart: "no"
    ports:
      - "6379:6379"

  backend:
    restart: "no"
    ports:
      - "8888:8888"
    volumes:
      - ./backend_api/:/app
    build:
      context: ./backend_api
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    command: /start-reload.sh

  pgadmin:
    restart: "no"
    ports:
      - "8881:80"

  backend-data-retrieval:
    restart: "no"
    ports:
      - "8889:8889"
    volumes:
      - ./backend_data_retrieval/:/data_retrieval_app
    build:
      context: ./backend_data_retrieval
      args:
        INSTALL_DEV: ${INSTALL_DEV-true}
    command: /data_retrieval_app/prestart.sh

  frontend:
    restart: "no"
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://${DOMAIN?Variable not set}
        - NODE_ENV=development

  vector:
    restart: "no"
    volumes:
      - ./vector-override.yaml:/etc/vector/vector.yaml:ro
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default

  loki:
    restart: "no"
    image: grafana/loki:main
    env_file:
      - .env
    ports:
      - "${LOKI_PORT}:${LOKI_PORT}"
    volumes:
      - ./loki.yaml:/etc/loki/local-config.yaml
      - loki-data:/var/lib/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default

  grafana:
    restart: "no" # or use `on-failure` if you prefer automatic restarts on crashes
    image: grafana/grafana:latest
    env_file:
      - .env
    environment:
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_ANONYMOUS_ENABLED=false
      - GF_AUTH_BASIC_ENABLED=false
      - GF_FEATURE_TOGGLES_ENABLE=accessControlOnCall
      - GF_INSTALL_PLUGINS=https://storage.googleapis.com/integration-artifacts/grafana-lokiexplore-app/grafana-lokiexplore-app-latest.zip;grafana-lokiexplore-app
    ports:
      - ${GRAFANA_PORT}:${GRAFANA_PORT}
    volumes:
      - grafana-data:/etc/grafana/provisioning # single volume for provisioning
    networks:
      - ${TRAEFIK_PUBLIC_NETWORK?Variable not set}
      - default
    entrypoint: >
      sh -c "mkdir -p /etc/grafana/provisioning/datasources /etc/grafana/provisioning/dashboards /etc/grafana/provisioning/plugins /etc/grafana/provisioning/alerting &&
      /run.sh"  # ensure directories exist

networks:
  traefik-public:
    # For local dev, don't expect an external Traefik network
    external: false

volumes:
  grafana-data:
    name: "grafana-data"
  loki-data:
    name: "loki-data"
